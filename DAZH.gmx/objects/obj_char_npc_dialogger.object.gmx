<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_char_npc</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Default dialog, vars</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Default dialog */
DIALOGUE[0,0] = "";    /* Page label (who/what is speaking) */
DIALOGUE[0,1] = "";    /* Dialogue text page */
DIALOGUE[0,2] = noone; /* Optional talksprite */
page = 0;              /* Current page */
charpos = 0;         /* Next character in the page to write */
page_end = false;     /* Reached the end of the page */

speaker = noone;     /* NPC that created the dialogger */

/* Optional choices to appear at the end of the dialogue */
CHOICES[0,0] = "";    /* Choice label */
CHOICES[0,1] = noone; /* Choice script */
selchoice = 0;        /* Selected choice */

/* Constants */
msg_width  = 20; /* Character limit per line */
msg_height = 4;  /* Line limit per page */
msg = "";        /* Display message */

/* Writing variables */
write_delay = 4;

/* Set the write-letter alarm */
alarm[0] = write_delay;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Add a character to the message array</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Add character to the message */
msg = string_copy(DIALOGUE[page,1], 0, charpos); /* Append char */
charpos++;

/* play a sound */

/* Reset alarm if there's more to write on current page */
if (charpos &lt;= string_length(DIALOGUE[page,1]))
{
    alarm[0] = write_delay;
}
else if (!page_end) page_end = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Player input, paging, choices</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Player input */
in_page = keyboard_check_pressed(vk_space); /* Start next page of text */
in_left =  (keyboard_check_pressed(vk_left)  || -gamepad_axis_value(0, gp_axislh)) &amp;&amp; !debug_entering_text;
in_right = (keyboard_check_pressed(vk_right) || gamepad_axis_value(0, gp_axislh))  &amp;&amp; !debug_entering_text;

/* Go trough pages */
if (in_page)
{
    if (page_end)
    {
        if ((page + 1) &lt; array_height_2d(DIALOGUE)) /* Pages remaining */
        {
            /* play a sound */
            msg = ""; charpos = 0; page_end = false;
            page++;
            alarm[0] = write_delay; /* Reset alarm */
        }
        else if (CHOICES[0,0] != "") /* Select a choice */
        {
            script_execute(CHOICES[selchoice,1]);   
        }
        else /* No pages remaining, no choices */
        {
            /* play a different sound */
            speaker.speaking = false;
            var player = instance_nearest(x, y, obj_char_player);
            player.can_control = true;
            instance_destroy();
        }
    }
    else
    {
        charpos = string_length(DIALOGUE[page,1]);
    }
}

if (page_end &amp;&amp; CHOICES[0,0] != "")
{   
    if (in_left &amp;&amp; selchoice &gt; 0)
        selchoice--;
    if (in_right &amp;&amp; selchoice &lt; (array_height_2d(CHOICES) - 1))
        selchoice++;     
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Draw dialog</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Position */
var hud_x = view_xview[0] + sprite_get_width(spr_hud_puzzle_frame_endcap); /* Position to draw relative to */
var hud_y = (view_yview[0] + view_hview[0]) - sprite_get_height(spr_hud_puzzle_frame_endcap);
    
/* BG */
draw_set_color(c_black);
draw_rectangle(view_xview[0], hud_y, hud_x + view_wview[0], hud_y + view_hview[0], false);

/* Talksprite &amp; Label */
draw_set_colour(c_white); draw_set_halign(fa_left);
if (DIALOGUE[page,2] != noone)
{
    draw_sprite(DIALOGUE[page,2],0,hud_x,hud_y + 2); /* TS */
    draw_text(hud_x, hud_y + 42, DIALOGUE[page,0]); /* label */
}
else draw_text(hud_x, hud_y + 2, DIALOGUE[page,0]);

/* Text */
draw_text(hud_x + 60, hud_y, msg);

/* Choices */
if (page_end)
{
    if (CHOICES[0,0] != "")
    {
        for (var i = 0; i &lt; array_height_2d(CHOICES); i++)
        {
            if (i == selchoice) draw_set_colour(c_fuchsia);
            else                draw_set_color(c_white);
            draw_text(hud_x + 60 + (60*i), hud_y + 42, CHOICES[i,0]);
        }
    }
    else
    {
        draw_set_colour(c_fuchsia);
        draw_text(hud_x + 60, hud_y + 42, "...");
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
