<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_char_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_char_par</parentName>
  <maskName>spr_char_player_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Initialize constants &amp; variables</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* env */
ENV = instance_nearest(x, y, obj_env); /* Update on room change... */

/* Constants */
WEIGHT = 1;   /* Effect of gravity */
XACCEL = 0.6; /* Horizontal acceleration */
JUMPSTR = 6;  /* Jump strength */
TERMXVEL = 4; /* Terminal horizontal velocity */
TERMYVEL = 8; /* Terminal verical velocity, should be the same for most objects */

/* Variables */
xprev = x;          /* Last valid horizontal position */
yprev = y;          /* Last valid vertical position */
xvel = 0;           /* Horizontal velocity */
yvel = 0;           /* Vertical velocity */
jumps[0] = 1; /* [max jumps, jumps remaining] */ 
jumps[1] = jumps[0];
airborn = true;    /* Is the object off the ground? */
noclip = false;    /* noclip mode enabled? */

/* Puzzle chips &amp; bar */
chip_reserve[0] = 0; /* Red chips in reserve */
chip_reserve[1] = 0; /* Blue chips */
chip_reserve[2] = 0; /* Yellow chips */
puzzlebar_cap = 8; /* Puzzle bar capacity */
var puzzlebar; /* The puzzle bar [row, column] */
for (i = 0; i &lt; puzzlebar_cap; i++)
{puzzlebar[0, i] = noone; puzzlebar[1, i] = noone; puzzlebar[2, i] = noone;}

/* Set alarms */
image_speed = 0; /* Blink */
alarm[0] = 120 + random(120);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Particles</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Particles */
player_part_sys = part_system_create();

/* Jump particles */
player_part_jump = part_type_create();
part_type_sprite(player_part_jump, spr_particle_puff, true, true, false);
part_type_size(player_part_jump, 1, 1, 0, 0);
part_type_speed(player_part_jump, 1, 1, 0, 0);
part_type_direction(player_part_jump, 200, 330, 0, 0);
part_type_life(player_part_jump, 10, 20);

/* Wallslide particles */
player_part_slide = part_type_create();
part_type_sprite(player_part_slide, spr_particle_puff, true, true, false);
part_type_size(player_part_slide, 1, 1, 0, 0);
part_type_speed(player_part_slide, 0, 0, 0, 0);
part_type_direction(player_part_slide, 0, 0, 0, 0);
part_type_life(player_part_slide, 10, 10);

/* Land particles */
player_part_land = part_type_create();
part_type_sprite(player_part_land, spr_particle_puff, true, true, false);
part_type_size(player_part_land, 1, 1, 0, 0);
part_type_speed(player_part_land, 0.8, 0.8, 0, 0);
part_type_direction(player_part_land, 0, 180, 0, 0);
part_type_life(player_part_land, 15, 25);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Trigger blink</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Trigger a blink */
image_index = 1;

/* Reset alarm */
alarm[0] = 120 + random(120);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Instances</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Instances */
if (airborn) WALL = noone;
else WALL = instance_nearest(x, y + 1, obj_area_wall_par);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Check user input</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Get user input */
in_up =    (keyboard_check(vk_up)      || -gamepad_axis_value(0, gp_axislv))         &amp;&amp; !debug_entering_text;
in_down =  (keyboard_check(vk_down)    || gamepad_axis_value(0, gp_axislv))          &amp;&amp; !debug_entering_text;
in_left =  (keyboard_check(vk_left)    || -gamepad_axis_value(0, gp_axislh))         &amp;&amp; !debug_entering_text;
in_right = (keyboard_check(vk_right)   || gamepad_axis_value(0, gp_axislh))          &amp;&amp; !debug_entering_text;
in_jump =  (keyboard_check_pressed(32) || gamepad_button_check_pressed(0, gp_face1)) &amp;&amp; !debug_entering_text;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Affect velocity</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Horz acceleration */
if (airborn || noclip)
{
    if (in_right &amp;&amp; xvel &lt; TERMXVEL) xvel += (0.4*XACCEL); /* Right */
    if (in_left &amp;&amp; -xvel &lt; TERMXVEL) xvel -= (0.4*XACCEL); /* Left */
}
else
{
    if (in_right &amp;&amp; xvel &lt; TERMXVEL) xvel += XACCEL;
    if (in_left &amp;&amp; -xvel &lt; TERMXVEL) xvel -= XACCEL;
}

/* Horz friction */
if (WALL == noone || noclip) /* Air friction */
{
    if (abs(xvel) &lt; 0.1*XACCEL) xvel = 0; 
    else xvel -= (sign(xvel)*(0.1*XACCEL));
}
else               /* Surface friction */ 
{
    if (xvel*sign(xvel) &lt; ds_map_find_value(WALL.attr, "friction")) xvel = 0;
    else xvel -= (sign(xvel)*(ds_map_find_value(WALL.attr, "friction"))); 
}

/* Vert acceleration */
if (airborn &amp;&amp; yvel &lt; TERMYVEL &amp;&amp; !noclip) /* Gravity */
{
    yvel += WEIGHT*ENV.GRAVITY; 
    if (place_meeting(x + 1, y, obj_area_wall_par) || place_meeting(x - 1, y, obj_area_wall_par)) /* Wall sliding */
    {
        wall = instance_nearest(x, y, obj_area_wall_par); side = sign(wall.x - x);
        if ((yvel - sign(yvel)*0.5*ds_map_find_value(wall.attr,"friction")) &gt; 0)
            yvel -= sign(yvel)*0.5*ds_map_find_value(wall.attr,"friction");
        if (abs(yvel) &gt; XACCEL)
            part_particles_create(player_part_sys, x - sprite_width/2, y + sprite_height/3, player_part_slide, 1);
        if (image_xscale != -side) image_xscale = -side;
    }
}
if (in_jump &amp;&amp; !noclip) /* Jumping */
{
    if (airborn &amp;&amp; (place_meeting(x + 1, y, obj_area_wall_par) || place_meeting(x - 1, y, obj_area_wall_par))) /* Wall jumping */
    {
        yvel = -0.8*JUMPSTR;
        xvel = -0.5*side*JUMPSTR;
    }
    else if (airborn &amp;&amp; jumps[1] &gt; 0) /* Multi-jumping */
    {
        yvel = -0.8*JUMPSTR;
        jumps[1]--;
        part_particles_create(player_part_sys, x, y + sprite_height/2, player_part_jump, 1);
    }
    else if (!airborn) /* A regular jump */
        yvel = -1*JUMPSTR;         
}
else if (noclip)
{
    if (in_up &amp;&amp; (-1*yvel) &lt; TERMXVEL) yvel -= (0.4*XACCEL); /* Up */
    if (in_down &amp;&amp; yvel &lt; TERMXVEL)    yvel += (0.4*XACCEL); /* Down */ 
    
    if (abs(yvel) &lt; 0.1*XACCEL) yvel = 0;              /* Air friction */ 
    else yvel -= (sign(yvel)*(0.1*XACCEL));  
}

/* Sprite */
if (!airborn)
{
    if (xvel != 0 &amp;&amp; image_xscale != sign(xvel)) image_xscale = sign(xvel);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Movement</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Movement */
xprev = x; /* Store last valid positions */
yprev = y;

if (!noclip &amp;&amp; place_meeting(x + xvel, y, obj_area_wall_par)) /* Horz collision */
{
    while (!place_meeting(x + sign(xvel), y, obj_area_wall_par))
        x += sign(xvel); /* Simulate collision */
    xvel = 0;            /* Halt velocity */      
}

if (y &gt; room_height) room_restart(); /* Restart when fall out of room */

if (!noclip &amp;&amp; place_meeting(x, y + yvel, obj_area_wall_par)) /* Vert collision */
{
    while (!place_meeting(x, y + sign(yvel), obj_area_wall_par))
        y += sign(yvel);
    if (sign(yvel) == 1 &amp;&amp; airborn) /* Landing */
    {
        airborn = false; 
        jumps[1] = jumps[0];
        part_particles_create(player_part_sys, x, y + sprite_height/2, player_part_land, 2);
    }
    yvel = 0;      
}
else if (!noclip &amp;&amp; !place_meeting(x, y + 1, obj_area_wall_par) &amp;&amp; !airborn) /* Liftoff */
{
    airborn = true;
}

x += xvel; /* Translate */
y += yvel;

if (!noclip &amp;&amp; place_meeting(x, y, obj_area_wall_par)) /* Fix if stuck in a wall */
{
    x = xprev; xvel = 0;
    y = yprev; yvel = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Chip collect</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (place_meeting(x, y, obj_item_chip))
{
    chip = instance_nearest(x, y, obj_item_chip);
    
    if      (chip.COLOR == c_red)    chip_reserve[0]++;
    else if (chip.COLOR == c_aqua)   chip_reserve[1]++;
    else if (chip.COLOR == c_yellow) chip_reserve[2]++;
    
    chip.collected = true;
    
    if (ENV.TARINST == chip) ENV.TARINST = noone;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Sprite</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (xvel = 0 &amp;&amp; sprite_index != spr_char_player) sprite_index = spr_char_player;

if (sprite_index = spr_char_player)
{
    /* Blinking, triggered by alarm 1 */
    if (image_index = 0 &amp;&amp; image_speed != 0) image_speed = 0;
    else if (image_index != 0 &amp;&amp; image_speed = 0) image_speed = 0.2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Chip reserve</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!debug_enabled)
{
    draw_set_font(font_reserve); draw_set_alpha(1);
    line = 0; lineheight = 16;
    
    draw_set_colour(c_red);
    draw_text(view_xview[0], view_yview[0] + (line*lineheight), "Red: " + string(chip_reserve[0])); line++;
    
    draw_set_colour(c_aqua);
    draw_text(view_xview[0], view_yview[0] + (line*lineheight), "Blue: " + string(chip_reserve[1])); line++;
    
    draw_set_color(c_yellow); 
    draw_text(view_xview[0], view_yview[0] + (line*lineheight), "Yellow: " + string(chip_reserve[2])); line++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
