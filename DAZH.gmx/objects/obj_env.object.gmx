<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Initialize constants &amp; variables</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Constants for environment objects are defined in creation code */

/* Variables */
freezer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Watch instances</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Instances */
PLAYER = instance_nearest(x, y, obj_player_test);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Check user input</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Get user input */
in_debug = keyboard_check_pressed(vk_f3) &amp;&amp; !debug_entering_text;
in_prompt = keyboard_check_pressed(vk_enter);
in_up = keyboard_check_pressed(vk_up);
in_down = keyboard_check_pressed(vk_down);
in_esc = keyboard_check_pressed(vk_escape);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Control</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Toggle debug mode */
if (in_debug) debug_enabled = !debug_enabled;

/* Command Prompt */
if (debug_entering_text)
{   
    if (in_up &amp;&amp; i &gt; 0)
    {keyboard_string = ds_list_find_value(command_list, i); i--;}
    if (in_down)
    {
        if (i &lt;= ds_list_size(command_list)) {keyboard_string = ds_list_find_value(command_list, i); i++;}
        else keyboard_string = "";
    }

    if (in_prompt) 
    {
        command = keyboard_string; /* Store command */
        
        /* Execute command */
        if (command == "exit") game_end();
        if (command == "restart") game_restart();   
        if (command == "spawn player") instance_create(PLAYER.x + 64, PLAYER.y - 32, obj_player_test);     
        
        if (command != "") ds_list_add(command_list, command);
        debug_entering_text = false; /* Close prompt */
    }
    
    if (in_esc)
    {debug_entering_text = false;}
}
else if (debug_enabled &amp;&amp; in_prompt)
{keyboard_string = ""; debug_entering_text = true; i = ds_list_size(command_list);}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Global variables</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Global variables */
globalvar debug_enabled; /* Is debug mode enabled? */
debug_enabled = false;
globalvar debug_entering_text; /* Is the user entering text in debug mode? */
debug_entering_text = false;
globalvar command_list; /* List of previously-entered commands */
command_list = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Draw debug info</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (debug_enabled)
{
    /* BG */
    draw_set_colour(c_olive); draw_set_alpha(0.5);
    draw_rectangle(view_xview[0], view_yview[0], view_xview[0]+view_wview[0], view_yview[0]+view_hview[0], false);

    line = 0; lineheight = 7;
    draw_set_font(font_debug); draw_set_colour(c_lime); draw_set_alpha(1);
    
    /* Room conditions */
    draw_text(view_xview[0], view_yview[0] + (line*lineheight), "ROOM"); line++;
    draw_text(view_xview[0] + 8, view_yview[0] + (line*lineheight), "NAME: " + room_get_name(room)); line++;
    if      (freezer == 0) draw_text(view_xview[0] + 8, view_yview[0] + (line*lineheight), "FPS: " + string(fps));
    else if (freezer == 1) draw_text(view_xview[0] + 8, view_yview[0] + (line*lineheight), "FPS: " + string(fps) + ".");
    else if (freezer == 2) draw_text(view_xview[0] + 8, view_yview[0] + (line*lineheight), "FPS: " + string(fps) + ".."); 
    else if (freezer == 3) draw_text(view_xview[0] + 8, view_yview[0] + (line*lineheight), "FPS: " + string(fps) + "..."); line++;
    draw_text(view_xview[0] + 8, view_yview[0] + (line*lineheight), "GRAVITY: " + string(GRAVITY)); line++;
    draw_text(view_xview[0] + 8, view_yview[0] + (line*lineheight), "INSTANCES: " + string(instance_count)); line+=2;
    
    /* Player */
    draw_text(view_xview[0], view_yview[0] + (line*lineheight), "PLAYER"); line++;
    draw_text(view_xview[0] + 8, view_yview[0] + (line*lineheight), "X: " + string(PLAYER.x)); draw_text(view_xview[0] + 100, view_yview[0] + (line*lineheight), "Y: " + string(PLAYER.y)); line++;   
    draw_text(view_xview[0] + 8, view_yview[0] + (line*lineheight), "XVEL: " + string(PLAYER.xvel)); draw_text(view_xview[0] + 100, view_yview[0] + (line*lineheight), "YVEL: " + string(PLAYER.yvel)); line++;
    draw_text(view_xview[0] + 8, view_yview[0] + (line*lineheight), "AIRBORN: " + string(PLAYER.airborn)); line+=2;

    /* Block */
    draw_text(view_xview[0], view_yview[0] + (line*lineheight), "BLOCK"); line++;
    if (PLAYER.BLOCK == noone) draw_text(view_xview[0] + 8, view_yview[0] + (line*lineheight), "N/A");
    else 
    {
        draw_text(view_xview[0] + 8, view_yview[0] + (line*lineheight), "TYPE: " + object_get_name(PLAYER.BLOCK.object_index) + " (" + string(PLAYER.BLOCK.id) + ")"); line++;
        draw_text(view_xview[0] + 8, view_yview[0] + (line*lineheight), "X: " + string(PLAYER.BLOCK.x)); draw_text(view_xview[0] + 100, view_yview[0] + (line*lineheight), "Y: " + string(PLAYER.BLOCK.y)); line++;
        draw_text(view_xview[0] + 8, view_yview[0] + (line*lineheight), "FRICTION: " + string(PLAYER.BLOCK.FRICTION));
    } line+=2;
    
    if (freezer &gt;= 3) freezer = 0;
    else              freezer++;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Draw prompt</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (debug_entering_text)
{
    /* BG */
    draw_set_colour(c_olive); draw_set_alpha(0.5);
    draw_rectangle(view_xview[0], view_yview[0]+view_hview[0]-7, view_xview[0]+view_wview[0], view_yview[0]+view_hview[0], false);

    /* Prompt */
    draw_set_font(font_debug); draw_set_colour(c_lime); draw_set_alpha(1);
    draw_text(view_xview[0], view_yview[0]+view_hview[0]-7, "&gt;"); draw_text(view_xview[0]+7, view_yview[0]+view_hview[0]-7, keyboard_string);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
