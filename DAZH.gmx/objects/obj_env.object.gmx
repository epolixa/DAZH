<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Initialize constants &amp; variables</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Constants for environment objects are defined in creation code */

/* Instances */
SELINST = noone;

/* Variables */
freezer = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Check user input</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Get user input */
in_debug = keyboard_check_pressed(vk_f3) &amp;&amp; !debug_entering_text;
in_prompt = keyboard_check_pressed(vk_enter);
in_leftclick = mouse_check_button_pressed(mb_left);
in_up = keyboard_check_pressed(vk_up);
in_down = keyboard_check_pressed(vk_down);
in_esc = keyboard_check_pressed(vk_escape);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Control</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Toggle debug mode */
if (in_debug)
{
    debug_enabled = !debug_enabled;
}

if (in_leftclick)
{
    SELINST = instance_nearest(mouse_x, mouse_y, obj_par);
}

/* Command Prompt */
if (debug_entering_text)
{   
    if (in_up)
    { 
        if (ds_list_find_index(command_list, keyboard_string) == -1) keyboard_string = ds_list_find_value(command_list, ds_list_size(command_list) - 1);
        else if (ds_list_find_index(command_list, keyboard_string) != 0) keyboard_string = ds_list_find_value(command_list, ds_list_find_index(command_list, keyboard_string) - 1);
    }
    if (in_down &amp;&amp; ds_list_find_index(command_list, keyboard_string) != -1) keyboard_string = ds_list_find_value(command_list, ds_list_find_index(command_list, keyboard_string) + 1);

    if (in_prompt) 
    {
        command = keyboard_string; /* Store command */
        
        /* ### COMMAND EXECUTION ### */
        if (command == "exit") game_end();
        else if (command == "restart") game_restart();   
        else if (string_lower(string_copy(command, 0, 6)) == "noclip")
        {
            PLAYER = instance_nearest(x, y, obj_char_player);
            PLAYER.noclip = !PLAYER.noclip;
            command_output[0] = "Toggled player noclip."; command_output[1] = 600;
        }
        else if (command == "toggle areas")
        {
            showareas = !showareas; 
            command_output[0] = "Toggled area visibility."; command_output[1] = 600;
        }
        else if (string_lower(string_copy(command, 0, 7)) == "gravity")
        {
            if (string_delete(command, 1, 8) == "") {command_output[0] = "No value specified."; command_output[1] = 600;}
            else
            {
                GRAVITY = real(string_delete(command, 1, 8)); 
                {command_output[0] = "Gravity set to " + string(GRAVITY) + "."; command_output[1] = 600;}
            }            
        }
        else if (string_lower(string_copy(command, 0, 8)) == "friction")
        {
            if (string_delete(command, 1, 9) == "") {command_output[0] = "No value specified."; command_output[1] = 600;}
            else if (PLAYER.BLOCK == noone) {command_output[0] = "No target surface."; command_output[1] = 600;}
            else
            {
                ds_map_replace(PLAYER.BLOCK.attr, "friction", real(string_delete(command, 1, 9))); 
                {command_output[0] = "Friction of " + object_get_name(PLAYER.BLOCK.object_index) + " (" + string(PLAYER.BLOCK.id) + ") set to " + string(ds_map_find_value(PLAYER.BLOCK.attr, "friction")) + "."; command_output[1] = 600;}
            }            
        }
        else if (string_lower(string_copy(command, 0, 6)) == "create") 
        {
            name = string_delete(command, 1, 7);
            if (name == "") {command_output[0] = "No object specified."; command_output[1] = 600;}
            else
            {
                obj = asset_get_index("obj_" + name);   
                if (!object_exists(obj))
                {command_output[0] = "Could not create 'obj_" + name + "', does not exist."; command_output[1] = 600;}
                else
                {
                    inst = instance_create(mouse_x, mouse_y, obj);
                    command_output[0] = "Created " + object_get_name(inst.object_index) + " (" + string(inst.id) + ") at " + string(inst.x) + ", " + string(inst.y) + "."; command_output[1] = 600;
                }
            }
        }
        else if (string_lower(string_copy(command, 0, 7)) == "destroy")
        {
            command_output[0] = "Destroyed " + object_get_name(SELINST.object_index) + " (" + string(SELINST.id) + ")."; command_output[1] = 600;
            with (SELINST)
                instance_destroy();
            SELINST = noone;
        }    
        else {command_output[0] = "Command '" + command + "' not recognized."; /*command_output[0] = string_split(command, " ");*/ command_output[1] = 600;}
        /* ### /COMMAND EXECUTION ### */
        
        if (command != "") 
        {
            if (ds_list_find_index(command_list, command) != -1) ds_list_delete(command_list, ds_list_find_index(command_list, command));        
            ds_list_add(command_list, command);
        }
        debug_entering_text = false; /* Close prompt */
    }
    
    if (in_esc)
    {debug_entering_text = false;}
}
else if (debug_enabled &amp;&amp; in_prompt)
{keyboard_string = ""; debug_entering_text = true;}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Global variables</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Global variables */
globalvar debug_enabled; /* Is debug mode enabled? */
debug_enabled = false;
globalvar debug_entering_text; /* Is the user entering text in debug mode? */
debug_entering_text = false;
globalvar command_list; /* List of previously-entered commands */
command_list = ds_list_create();
globalvar command_output; /* Command output */
command_output[0] = "Press ENTER to use commands.";
command_output[1] = 600;
globalvar showareas; /* Are areas visible? */
showareas = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Draw debug info</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (debug_enabled)
{
    /* BG */
    draw_set_colour(c_olive); draw_set_alpha(0.5);
    draw_rectangle(view_xview[0], view_yview[0], view_xview[0]+view_wview[0], view_yview[0]+view_hview[0], false);

    line = 0; lineheight = 7;
    draw_set_font(font_debug); draw_set_colour(c_lime); draw_set_alpha(1);
    
    /* Room conditions */
    draw_text(view_xview[0], view_yview[0] + (line*lineheight), "ROOM"); line++;
    draw_text(view_xview[0] + 8, view_yview[0] + (line*lineheight), "NAME: " + room_get_name(room)); line++;
    if      (freezer == 0) draw_text(view_xview[0] + 8, view_yview[0] + (line*lineheight), "FPS: " + string(fps));
    else if (freezer == 1) draw_text(view_xview[0] + 8, view_yview[0] + (line*lineheight), "FPS: " + string(fps) + ".");
    else if (freezer == 2) draw_text(view_xview[0] + 8, view_yview[0] + (line*lineheight), "FPS: " + string(fps) + ".."); 
    else if (freezer == 3) draw_text(view_xview[0] + 8, view_yview[0] + (line*lineheight), "FPS: " + string(fps) + "..."); line++;
    draw_text(view_xview[0] + 8, view_yview[0] + (line*lineheight), "GRAVITY: " + string(GRAVITY)); line++;
    draw_text(view_xview[0] + 8, view_yview[0] + (line*lineheight), "INSTANCES: " + string(instance_count)); line+=2;
    
    /* Selected instance */
    if (SELINST != noone)
    {    
        draw_text(view_xview[0], view_yview[0] + (line*lineheight), "SELECTED"); line++;
    
        /* Name &amp; universal properties */
        draw_text(view_xview[0] + 8, view_yview[0] + (line*lineheight), object_get_name(SELINST.object_index) + " (" + string(SELINST.id) + ")"); line++;
        draw_text(view_xview[0] + 8, view_yview[0] + (line*lineheight), "X: " + string(SELINST.x)); draw_text(view_xview[0] + 100, view_yview[0] + (line*lineheight), "Y: " + string(SELINST.y)); line++;
        
        /* Special attributes */
        if (object_get_parent(SELINST.object_index) == obj_area_wall_par)
        {
            if (ds_map_exists(SELINST.attr, "friction")) draw_text(view_xview[0] + 8, view_yview[0] + (line*lineheight), "FRICTION: " + string(ds_map_find_value(SELINST.attr, "friction"))); 
            line+=2;
        }
        else if (SELINST.object_index == obj_amb_butterfly)
        {
            draw_text(view_xview[0] + 8, view_yview[0] + (line*lineheight), "XTAR: " + string(SELINST.xtar)); draw_text(view_xview[0] + 100, view_yview[0] + (line*lineheight), "YTAR: " + string(SELINST.ytar)); line++;
            draw_text(view_xview[0] + 8, view_yview[0] + (line*lineheight), "COLOR: " + string(colour_get_red(SELINST.image_blend)) + string(colour_get_green(SELINST.image_blend)) + string(colour_get_blue(SELINST.image_blend))); 
            line+=2;
        }
        
        /* Highlight */
        with (SELINST)
            draw_rectangle(x - sprite_width/2, y - sprite_height/2, x + sprite_width/2, y + sprite_height/2, true);
    }
    
    /* Command output */
    if (command_output[1] &gt; 0) {draw_text(view_xview[0], view_yview[0]+view_hview[0]-14, command_output[0]); command_output[1]--;}
    
    if (freezer &gt;= 3) freezer = 0;
    else              freezer++;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Draw prompt</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (debug_entering_text)
{
    /* BG */
    draw_set_colour(c_olive); draw_set_alpha(0.5);
    draw_rectangle(view_xview[0], view_yview[0]+view_hview[0]-7, view_xview[0]+view_wview[0], view_yview[0]+view_hview[0], false);    
    
    /* Prompt */
    draw_set_font(font_debug); draw_set_colour(c_lime); draw_set_alpha(1);
    draw_text(view_xview[0], view_yview[0]+view_hview[0]-7, "&gt;"); draw_text(view_xview[0]+7, view_yview[0]+view_hview[0]-7, keyboard_string);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
