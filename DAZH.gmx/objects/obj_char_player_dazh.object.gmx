<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_char_dazh_stand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>obj_char_player</parentName>
  <maskName>spr_char_dazh_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Initialize constants &amp; variables</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Constants */
WEIGHT = 1;   /* Effect of gravity */
XACCEL = 0.6; /* Horizontal acceleration */
JUMPSTR = 6;  /* Jump strength */
TERMXVEL = 4; /* Terminal horizontal velocity */
TERMYVEL = 8; /* Terminal verical velocity, should be the same for most objects */

/* Variables */
xprev = x;          /* Last valid horizontal position */
yprev = y;          /* Last valid vertical position */
xvel = 0;           /* Horizontal velocity */
yvel = 0;           /* Vertical velocity */
cjumpstr = 0.8;       /* Chip-jump strength */
airborn = true;    /* Is the object off the ground? */
wet = false;       /* Is the object in water? */
noclip = false;    /* noclip mode enabled? */
can_control = true; /* Player affected by input? */

/* Puzzle chips &amp; bar */
chip_reserve[0] = 0; /* Red chips in reserve */
chip_reserve[1] = 0; /* Blue chips */
chip_reserve[2] = 0; /* Yellow chips */
chip_total = 0;      /* Count of all chips in reserve */
next_chip = -1;       /* Next chip to load */  
slot = 0;            /* Slot selected */
puzzlebar_cap = 9; /* Puzzle bar capacity */
for (i = 0; i &lt; puzzlebar_cap; i++) /* The puzzle bar [row, column] */
{puzzlebar[0, i] = noone; puzzlebar[1, i] = noone; puzzlebar[2, i] = noone;}

/* Set alarms */
image_speed = 0;
alarm[0] = 300 + random(300);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Particles</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Player particles */

/* Jump particles */
player_part_jump = part_type_create();
part_type_sprite(player_part_jump, spr_particle_puff, true, true, false);
part_type_size(player_part_jump, 1, 1, 0, 0);
part_type_speed(player_part_jump, 1, 1, 0, 0);
part_type_direction(player_part_jump, 200, 330, 0, 0);
part_type_life(player_part_jump, 10, 20);

/* Slide particles */
player_part_slide = part_type_create();
part_type_sprite(player_part_slide, spr_particle_puff, true, true, false);
part_type_size(player_part_slide, 1, 1, 0, 0);
part_type_speed(player_part_slide, 0.2, 0.2, 0, 0);
part_type_direction(player_part_slide, 0, 359, 0, 0);
part_type_life(player_part_slide, 10, 10);

/* Land particles */
player_part_land = part_type_create();
part_type_sprite(player_part_land, spr_particle_puff, true, true, false);
part_type_size(player_part_land, 1, 1, 0, 0);
part_type_speed(player_part_land, 0.8, 0.8, 0, 0);
part_type_direction(player_part_land, 0, 180, 0, 0);
part_type_life(player_part_land, 15, 25);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Trigger idle animation</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Trigger idle animation */
if (sprite_index != spr_char_dazh_idle)
{
    sprite_index = spr_char_dazh_idle;
    image_speed = 0.05;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Trigger blink animation</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Trigger a blink */
if (sprite_index == spr_char_dazh_stand)
{
    image_index = 1;
    image_speed = 0.4;
}

alarm[0] = 300 + random(300);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Check user input</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Get user input */
if (can_control)
{
    in_up =         (keyboard_check(vk_up)      || -gamepad_axis_value(0, gp_axislv))         &amp;&amp; !debug_entering_text;
    in_down =       (keyboard_check(vk_down)    || gamepad_axis_value(0, gp_axislv))          &amp;&amp; !debug_entering_text;
    in_left =       (keyboard_check(vk_left)    || -gamepad_axis_value(0, gp_axislh))         &amp;&amp; !debug_entering_text;
    in_right =      (keyboard_check(vk_right)   || gamepad_axis_value(0, gp_axislh))          &amp;&amp; !debug_entering_text;
    in_jump =       (keyboard_check_pressed(32) || gamepad_button_check_pressed(0, gp_face1)) &amp;&amp; !debug_entering_text;
    in_shoot =      (keyboard_check_pressed(ord("F")) || gamepad_button_check_pressed(0, gp_shoulderrb)) &amp;&amp; !debug_entering_text;
    in_slotup =     (keyboard_check_pressed(ord("W")) || gamepad_button_check_pressed(0, gp_padu) || gamepad_button_check_pressed(0, gp_shoulderl)) &amp;&amp; !debug_enabled;
    in_slotdown =   (keyboard_check_pressed(ord("S")) || gamepad_button_check_pressed(0, gp_padd) || gamepad_button_check_pressed(0, gp_shoulderr)) &amp;&amp; !debug_enabled;
    in_loadslot =   (keyboard_check_pressed(ord("D")) || gamepad_button_check_pressed(0, gp_shoulderlb)) &amp;&amp; !debug_enabled;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Instances</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* env */
ENV = instance_nearest(x, y, obj_env); /* Update on room change... */

/* Instances */
if (airborn &amp;&amp; ((place_meeting(x + 1, y, obj_area_wall) &amp;&amp; in_right &amp;&amp; !in_left) || (place_meeting(x - 1, y, obj_area_wall) &amp;&amp; in_left &amp;&amp; !in_right))) 
    WALL = instance_place(x + sprite_width/2, y + sprite_height/4, obj_area_wall);
else if (!airborn) WALL = instance_place(x, y + sprite_height/2 + 4, obj_area_wall);
else WALL = noone;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Affect velocity</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (noclip)   /* NOCLIP */
{
    if (in_right) xvel += (0.4*XACCEL); /* Right */
    if (in_left)  xvel -= (0.4*XACCEL); /* Left */
    if (in_up)    yvel -= (0.4*XACCEL); /* Up */
    if (in_down)  yvel += (0.4*XACCEL); /* Down */ 
    
    if (abs(yvel) &lt; 0.1*XACCEL) yvel = 0; /* Air friction */ 
    else yvel -= (sign(yvel)*(0.1*XACCEL));  
}
else if (wet) /* UNDERWATER */
{
    if (WALL == noone)
    {
        if (in_right) xvel += (0.2*XACCEL);  /* Right */
        if (in_left)  xvel -= (0.2*XACCEL);  /* Left */
        
        yvel += 0.1*WEIGHT*ENV.GRAVITY;     
    }
    else
    {
        if (in_right) xvel += 0.5*WALL.FRICTION*XACCEL;
        if (in_left)  xvel -= 0.5*WALL.FRICTION*XACCEL;
        if (!in_left &amp;&amp; !in_right &amp;&amp; xvel != 0) 
        {
            if (abs(xvel) &lt; 0.5*WALL.FRICTION*XACCEL) xvel = 0;
            else xvel -= (sign(xvel)*0.5*WALL.FRICTION*XACCEL); 
        }
    }
    
    if (in_jump) yvel = -0.2*JUMPSTR;
    
    /* Not so fast!! */
    if (abs(xvel) &gt; 0.4*TERMXVEL) xvel = sign(xvel)*0.4*TERMXVEL;
    if (abs(yvel) &gt; 0.4*TERMYVEL) yvel = sign(yvel)*0.4*TERMYVEL;
}
else 
{
    /* Horz acceleration */
    if (airborn)
    {
        if (in_right) xvel += (0.4*XACCEL); /* Right */
        if (in_left) xvel -= (0.4*XACCEL); /* Left */
    }
    else if (WALL != noone)
    {
        if (in_right) xvel += WALL.FRICTION*XACCEL;
        if (in_left) xvel -= WALL.FRICTION*XACCEL;
        if (!in_left &amp;&amp; !in_right &amp;&amp; xvel != 0) 
        {
            part_particles_create(global.part_sys, x - sprite_width/3, y + sprite_height/2, player_part_slide, 1);
            if (abs(xvel) &lt; WALL.FRICTION*XACCEL) xvel = 0;
            else xvel -= (sign(xvel)*WALL.FRICTION*XACCEL); 
        }
    }
    if (abs(xvel) &gt; TERMXVEL) xvel = sign(xvel)*TERMXVEL;
    
    /* Vert acceleration */
    if (airborn &amp;&amp; !noclip) /* Gravity */
    {
        yvel += WEIGHT*ENV.GRAVITY; 
        if (WALL != noone) /* Wall sliding */
        {
            yvel -= sign(yvel)*0.5*WALL.FRICTION;
            if (abs(yvel) &gt; XACCEL)
                part_particles_create(global.part_sys, x + sprite_width/2, y + sprite_height/3, player_part_slide, 1);
        }
    }
    if (in_jump &amp;&amp; !noclip) /* Jumping */
    {
        if (airborn &amp;&amp; WALL != noone) /* Wall jumping */
        {
            yvel = -2*WALL.FRICTION*JUMPSTR; if (yvel &lt; -JUMPSTR) yvel = -JUMPSTR;
            xvel = 0.5*sign(x - WALL.x)*JUMPSTR;
            image_xscale = -image_xscale; 
        }
        else if (airborn &amp;&amp; puzzlebar[slot, 0] != noone &amp;&amp; puzzlebar[slot, 0] != c_purple) /* Chip-jumping */
        {        
            shot = instance_create(x, y, obj_proj_chip);
            shot.yvel = 8;
            shot.COLOR = puzzlebar[slot, 0].COLOR;
            with(puzzlebar[slot, 0]) instance_destroy();
            puzzlebar[slot, 0] = noone;  
        
            if (cjumpstr &gt; 0) {yvel = -cjumpstr*JUMPSTR; if (cjumpstr &gt; 0.1) cjumpstr -= 0.1;}
        }
        else if (!airborn) /* A regular jump */
        {
            yvel = -1*JUMPSTR;
            part_particles_create(global.part_sys, x, y + sprite_height/2, player_part_jump, 1);
        }         
    }
    
    /* Not so fast!! */
    if (abs(xvel) &gt; TERMXVEL) xvel = sign(xvel)*TERMXVEL;
    if (abs(yvel) &gt; TERMYVEL) yvel = sign(yvel)*TERMYVEL;
}



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Collision</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* WALL COLLISION AND MOVEMENT */
xprev = x; /* Store last valid positions */
yprev = y;

if (!noclip)
{
    if (place_meeting(x + xvel, y, obj_area_wall)) /* Horz collision */
    {
        while (!place_meeting(x + sign(xvel), y, obj_area_wall))
            x += sign(xvel); /* Simulate collision */
        xvel = 0;            /* Halt velocity */      
    }
    
    if (place_meeting(x, y + yvel, obj_area_wall)) /* Vert collision */
    {
        while (!place_meeting(x, y + sign(yvel), obj_area_wall))
            y += sign(yvel);
        if (sign(yvel) == 1 &amp;&amp; airborn) /* Landing */
        {
            airborn = false; cjumpstr = 0.8;
            part_particles_create(global.part_sys, x, y + sprite_height/2, player_part_land, 2);
        }
        yvel = 0;      
    }
    else if (!place_meeting(x, y + 1, obj_area_wall) &amp;&amp; !airborn &amp;&amp; !wet) /* Liftoff */
    {
        airborn = true;
    }
    
    /* WATER */
    if (place_meeting(x, y, obj_area_water) &amp;&amp; !wet) /* Into water */
    {
        if (airborn) airborn = false; cjumpstr = 0.8;
        splash();
        wet = true;
    }
    else if (!place_meeting(x, y, obj_area_water) &amp;&amp; wet) /* Outof water */
    {
        wet = false;
    }
    if (wet &amp;&amp; !floor(random(20))) /* Make bubbles */
    {
        var bubble = instance_create(x, y, obj_amb_bubble);
        bubble.xvel = floor(random(3)) - 1;
        bubble.yvel = floor(random(3)) - 1;
    }
}

/* Translate */
x += xvel; 
y += yvel;

if (!noclip &amp;&amp; place_meeting(x, y, obj_area_wall)) /* Fix if stuck in a wall */
{
    x = xprev; xvel = 0;
    y = yprev; yvel = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Chip Management</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Die if overloaded with chips */
if (puzzlebar[0, puzzlebar_cap - 1] != noone &amp;&amp;
    puzzlebar[1, puzzlebar_cap - 1] != noone &amp;&amp;
    puzzlebar[2, puzzlebar_cap - 1] != noone)
{
    room_restart();
}

/* Chip collect */
if (place_meeting(x, y, obj_item_chip))
{
    chip = instance_nearest(x, y, obj_item_chip);
    
    if      (chip.COLOR == c_red)    chip_reserve[0]++;
    else if (chip.COLOR == c_aqua)   chip_reserve[1]++;
    else if (chip.COLOR == c_yellow) chip_reserve[2]++;
    chip_total++;
    
    chip.collected = true;
    
    if (ENV.TARINST == chip) ENV.TARINST = noone;
}

/* Select next chip color to load */
if (next_chip &lt; 0 &amp;&amp; chip_total &gt; 0) 
{
    do next_chip = floor(random(3)); until (chip_reserve[next_chip] &gt; 0)
    switch(next_chip) {case 1: next_chip_color = c_aqua; break; case 2: next_chip_color = c_yellow; break; default: next_chip_color = c_red;}    
}

/* Shooting chips */
if (in_shoot &amp;&amp; puzzlebar[slot, 0] != noone &amp;&amp; puzzlebar[slot, 0] != c_purple)
{   
    var shot;
    if (in_up) shot = instance_create(x, y - sprite_height/2, obj_proj_chip);
    else shot = instance_create(x + sprite_width/2, y, obj_proj_chip);
    if (in_up) shot.yvel = -8;
    else if (in_right || in_left &amp;&amp; !(in_right &amp;&amp; in_left)) shot.xvel = (in_right - in_left)*8;
    else shot.xvel = image_xscale*8;
    shot.COLOR = puzzlebar[slot, 0].COLOR;
    with(puzzlebar[slot, 0]) instance_destroy();
    puzzlebar[slot, 0] = noone;    
}

/* Change slot */
if (in_slotdown &amp;&amp; slot &lt; 2) slot++;
else if (in_slotup &amp;&amp; slot &gt; 0) slot --;

/* Loading chips */
if (in_loadslot)
{
    if (next_chip &gt;= 0 &amp;&amp; puzzlebar[slot, puzzlebar_cap - 2] == noone)
    {
        chip_reserve[next_chip]--; chip_total--; next_chip = -1;
        var chip = instance_create(view_xview[0] + sprite_get_width(spr_hud_puzzle_frame_endcap) 
                                   + ((puzzlebar_cap - 1)*sprite_get_width(spr_hud_puzzle_chip)) + sprite_get_width(spr_hud_puzzle_chip)/2,
                                   (view_yview[0] + view_hview[0]) - sprite_get_height(spr_hud_puzzle_frame_endcap) 
                                   + slot*(sprite_get_height(spr_hud_puzzle_chip) + 4) + sprite_get_height(spr_hud_puzzle_chip)/2 + 2,
                                   obj_hud_chip);
        chip.xpos = puzzlebar_cap - 2;
        chip.COLOR = next_chip_color;
        puzzlebar[slot, puzzlebar_cap - 2] = chip;
    }
    else
    {
        /* Empty sound? */
    }
}

/* Shift slots */
for (i = 0; i &lt; 3; i++)
    for (j = 1; j &lt; puzzlebar_cap; j++)
    {
        if (puzzlebar[i, j] != noone)
        {
            if (puzzlebar[i, j] != c_purple &amp;&amp; puzzlebar[i, j - 1] == noone)
            {
                puzzlebar[i, j - 1] = puzzlebar[i, j];
                puzzlebar[i, j] = noone;
                puzzlebar[i, j - 1].xpos--;
            }   
        }  
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Sprite</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Base checks */
if      (!airborn &amp;&amp; xvel == 0 &amp;&amp; sprite_index != spr_char_dazh_stand &amp;&amp; sprite_index != spr_char_dazh_idle) {sprite_index = spr_char_dazh_stand; image_index = 0; image_speed = 0;} /* Standing */
else if (!airborn &amp;&amp; !in_left &amp;&amp; !in_right &amp;&amp; xvel != 0 &amp;&amp; sprite_index != spr_char_dazh_slide)          {sprite_index = spr_char_dazh_slide; image_speed = 0;}          /* Slide (Skid)? */
else if (!airborn &amp;&amp; (in_left || in_right) &amp;&amp; xvel != 0 &amp;&amp; sprite_index != spr_char_dazh_walk)           {sprite_index = spr_char_dazh_walk;}                               /* Walking */
else if (airborn &amp;&amp; WALL != noone &amp;&amp; sprite_index != spr_char_dazh_wslide)                               {sprite_index = spr_char_dazh_wslide; image_speed = 0;}         /* Wallsliding */
else if (airborn &amp;&amp; WALL == noone &amp;&amp; yvel &lt;= 0 &amp;&amp; sprite_index != spr_char_dazh_rising)                  {sprite_index = spr_char_dazh_rising; image_speed = 0;}           /* Rising */
else if (airborn &amp;&amp; WALL == noone &amp;&amp; yvel &gt; 0 &amp;&amp; sprite_index != spr_char_dazh_falling)                  {sprite_index = spr_char_dazh_falling; image_speed = 0.2;}        /* Falling */

/* While standing */
if (sprite_index == spr_char_dazh_stand)
{        
    if (!image_index) image_speed = 0;
    
    /* Set idle animation alarm */
    if (alarm[1] &lt;= -1) alarm[1] = 1200;
}

/* While walking */
if (sprite_index == spr_char_dazh_walk)
{
    /* Image speed relative to xvel */
    image_speed = 0.1*abs(xvel);

    /* Unset idle animation alarm */
    if (alarm[1] &gt; -1) alarm[1] = -1;
}

/* Facing */
if (!airborn &amp;&amp; (in_left || in_right) &amp;&amp; !(in_left &amp;&amp; in_right)) image_xscale = in_right - in_left;
else if (!in_left &amp;&amp; !in_right &amp;&amp; xvel != 0) image_xscale = sign(xvel);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>View focus</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* If in a focus area */
if (place_meeting(x, y, obj_area_focus) &amp;&amp; view_object != instance_nearest(x, y, obj_area_focus))
    view_object[0] = instance_nearest(x, y, obj_area_focus);
else if (!place_meeting(x, y, obj_area_focus) &amp;&amp; view_object != id)
    view_object[0] = id;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Fallout</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (x &lt; 0 || x &gt; room_width || y &lt; 0 || y &gt; room_height)
{
    game_restart();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Puzzle Bar</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Draw puzzle bar */
if (!debug_enabled &amp;&amp; can_control)
{
    hud_x = view_xview[0] + sprite_get_width(spr_hud_puzzle_frame_endcap); /* Position to draw relative to */
    hud_y = (view_yview[0] + view_hview[0]) - sprite_get_height(spr_hud_puzzle_frame_endcap);
    var chip_size = sprite_get_width(spr_hud_puzzle_chip);
    frame_color = c_fuchsia;
    
    /* Draw BG */
    draw_set_color(c_black);
    draw_rectangle(view_xview[0], hud_y, hud_x + view_wview[0], hud_y + view_hview[0], false);    
    
    /* Draw end cap */
    
    /* Draw sides */
    for (i = 0; i &lt; puzzlebar_cap; i++)
    {
        draw_sprite_ext(spr_hud_puzzle_frame_side, 0, 
                        hud_x + i*sprite_get_width(spr_hud_puzzle_frame_side), 
                        hud_y,
                        1, 1, 0, frame_color, 1); 
        draw_sprite_ext(spr_hud_puzzle_frame_side, 0, 
                        hud_x + i*sprite_get_width(spr_hud_puzzle_frame_side), 
                        hud_y + sprite_get_height(spr_hud_puzzle_frame_endcap),
                        1, -1, 0, frame_color, 1);        
    }
    
    /* Draw slot loader */
    draw_sprite_ext(spr_hud_puzzle_slotloader, 0, 
                    hud_x + puzzlebar_cap*sprite_get_width(spr_hud_puzzle_frame_side),
                    hud_y + slot*sprite_get_height(spr_hud_puzzle_slotloader),
                    1, 1, 0, frame_color, 1); 
    if (next_chip &gt;= 0)
        draw_sprite_ext(spr_hud_puzzle_chip, 0,
                        hud_x + puzzlebar_cap*sprite_get_width(spr_hud_puzzle_frame_side) + 14 + chip_size/2,
                        hud_y + slot*sprite_get_height(spr_hud_puzzle_slotloader) + 2 + chip_size/2,
                        1, 1, 0, next_chip_color, 1);    
                        
    /* Draw slots */
    for (i = puzzlebar_cap - 2; i &gt;= 0; i--)
    {
        if (puzzlebar[slot, i] == noone)
            draw_sprite_ext(spr_hud_puzzle_chip, 0,
                    hud_x + i*chip_size + chip_size/2,
                    hud_y + slot*(chip_size + 4) + chip_size/2 + 2,
                    1, 1, 0, c_white, 0.2);            
    }

    /* Draw chip reserve */
    draw_set_font(font_reserve); draw_set_alpha(1); draw_set_halign(fa_right);
    line = 0; lineheight = 10;
    
    draw_set_colour(c_yellow);
    draw_text((view_xview[0] + view_wview[0]) - 12, hud_y + (line*lineheight), string(chip_reserve[2]));
    draw_sprite_ext(spr_item_chip, 0, (view_xview + view_wview[0]) - 6, hud_y + (line*lineheight) + 8, 1, 1, 0, c_yellow, 1); line++;
    
    draw_set_colour(c_aqua);
    draw_text((view_xview[0] + view_wview[0]) - 12, hud_y + (line*lineheight), string(chip_reserve[1]));
    draw_sprite_ext(spr_item_chip, 0, (view_xview + view_wview[0]) - 6, hud_y + (line*lineheight) + 8, 1, 1, 0, c_aqua, 1); line++;
    
    draw_set_colour(c_red);
    draw_text((view_xview[0] + view_wview[0]) - 12, hud_y + (line*lineheight), string(chip_reserve[0]));
    draw_sprite_ext(spr_item_chip, 0, (view_xview + view_wview[0]) - 6, hud_y + (line*lineheight) + 8, 1, 1, 0, c_red, 1); line++;    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
