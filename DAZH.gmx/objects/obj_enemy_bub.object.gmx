<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_enemy_bub</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy_par</parentName>
  <maskName>spr_enemy_bub_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Initialize constants &amp; variables</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* env */
ENV = instance_nearest(x, y, obj_env); /* Update on room change... */

/* Constants */
WEIGHT = 0.5;   /* Effect of gravity */
XACCEL = 0.2; /* Horizontal acceleration */
JUMPSTR = 4;  /* Jump strength */
TERMXVEL = 2; /* Terminal horizontal velocity */
TERMYVEL = 8; /* Terminal verical velocity, should be the same for most objects */

/* Variables */
xprev = x;          /* Last valid horizontal position */
yprev = y;          /* Last valid vertical position */
xvel = 0;           /* Horizontal velocity */
yvel = 0;           /* Vertical velocity */
airborn = true;    /* Is the object off the ground? */

/* Get initial target */
event_perform(ev_alarm, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Movement target refresh</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Find random movement target in the room */
var maxdropdist = 3;

do
{
    xtar = floor(random(room_width));
    ytar = floor(random(room_height));
}
until (!place_meeting(xtar, ytar, obj_area_wall_par));

while (!place_meeting(xtar, ytar + sprite_height/2, obj_area_wall_par) &amp;&amp; maxdropdist &gt; 0)
{ytar += sprite_height/2; maxdropdist--;}    

/* Reset alarm */
alarm[0] = 60 + random(60);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Instances</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Instances */
if (!airborn) WALL = instance_nearest(x, y + 1, obj_area_wall_par);
else WALL = noone;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Affect velocity</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (WALL != noone) {fric = ds_map_find_value(WALL.attr, "friction"); if (fric &gt; 1) fric = 1; side = sign(WALL.x - x);}

/* Horz acceleration */
if (airborn)
{    
    if      (x &lt; xtar) xvel += 0.4*XACCEL;
    else if (x &gt; xtar) xvel -= 0.4*XACCEL;
}
else if (WALL != noone)
{
    if (x &lt; xtar) xvel += fric*XACCEL;
    if (x &gt; xtar) xvel -= fric*XACCEL;
    if (x &gt; xtar - sprite_width/2 &amp;&amp; x &lt; xtar + sprite_width/2) 
    {
        if (abs(xvel) &lt; fric*XACCEL) xvel = 0;
        else xvel -= (sign(xvel)*fric*XACCEL); 
    }
}
if (abs(xvel) &gt; TERMXVEL) xvel = sign(xvel)*TERMXVEL;

/* Vert acceleration */
if (airborn) /* Gravity */
{
    yvel += WEIGHT*ENV.GRAVITY;     
    if (abs(yvel) &gt; TERMYVEL) yvel = sign(yvel)*TERMYVEL;
}
if (!airborn &amp;&amp; ytar &gt; y &amp;&amp; (place_meeting(x - sprite_width, y, obj_area_wall_par) || place_meeting(x + sprite_width, y, obj_area_wall_par))) /* Jumping */
{
    yvel = -JUMPSTR;        
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Movement</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Movement */
xprev = x; /* Store last valid positions */
yprev = y;

if (place_meeting(x + xvel, y, obj_area_wall_par)) /* Horz collision */
{
    while (!place_meeting(x + sign(xvel), y, obj_area_wall_par))
        x += sign(xvel); /* Simulate collision */
    xvel = 0;            /* Halt velocity */      
}

if (place_meeting(x, y + yvel, obj_area_wall_par)) /* Vert collision */
{
    while (!place_meeting(x, y + sign(yvel), obj_area_wall_par))
        y += sign(yvel);
    if (sign(yvel) == 1 &amp;&amp; airborn) /* Landing */
    {
        airborn = false; 
    }
    yvel = 0;      
}
else if (!place_meeting(x, y + 1, obj_area_wall_par) &amp;&amp; !airborn) /* Liftoff */
{
    airborn = true;
}

x += xvel; /* Translate */
y += yvel;

if (place_meeting(x, y, obj_area_wall_par)) /* Fix if stuck in a wall */
{
    x = xprev; xvel = 0;
    y = yprev; yvel = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Fallout</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (x &lt; 0 || x &gt; room_width || y &lt; 0 || y &gt; room_height)
{
    if (ENV.TARINST == id) ENV.TARINST = noone;
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
