<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_proj_chip</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_proj</parentName>
  <maskName>spr_item_chip_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Constants &amp; Variables</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* env */
ENV = instance_nearest(x, y, obj_env);

/* Constants */
COLOR = random(3); /* Initial color is random unless specified in creation code */
if      (COLOR &gt;= 0 &amp;&amp; COLOR &lt; 1) COLOR = c_red;
else if (COLOR &gt;= 1 &amp;&amp; COLOR &lt; 2) COLOR = c_aqua;
else                              COLOR = c_yellow;
alarm[0] = 1;  /* Apply image blend immediately after instance create */

/* Variables */
xvel = 0;           /* Horizontal velocity */
yvel = 0;           /* Vertical velocity */
wet = false;        /* IS the object in water? */

image_speed = 0.4;

/* Projectile life */
alarm[1] = 60;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Chip particles</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Chip particles */
chip_part_tail = part_type_create();
part_type_sprite(chip_part_tail, spr_particle_puff, true, true, false);
part_type_size(chip_part_tail, 1, 1, 0, 0);
part_type_speed(chip_part_tail, 0.5, 0.5, 0, 0);
part_type_direction(chip_part_tail, 0, 359, 0, 0);
part_type_gravity(chip_part_tail, 0.1, 270);
part_type_life(chip_part_tail, 5, 10);

chip_part_item = part_type_create();
part_type_sprite(chip_part_item, spr_particle_collect, true, false, false);
part_type_size(chip_part_item, 1, 1, 0, 0);
part_type_speed(chip_part_item, 0, 0, 0, 0);
part_type_direction(chip_part_item, 0, 0, 0, 0);
part_type_life(chip_part_item, 10, 10);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Become item</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* If hit a breakable wall */
wall = instance_place(x - xvel, y - yvel, obj_area_wall);
if (wall != noone)
    if (wall.object_index == obj_area_breakable)
        if (wall.COLOR == COLOR)
        {        
            with (wall) DURABILITY--;
            
            part_particles_create(part_sys, x, y, chip_part_item, 1);
            if (ENV.TARINST == id) ENV.TARINST = noone;
            instance_destroy();
            exit;
        }

/* Otherwise become an item */
item = instance_create(x, y, obj_item_chip);
item.xvel = 0.4*xvel;
item.yvel = 0.4*yvel;
item.COLOR = COLOR;

part_particles_create(part_sys, x, y, chip_part_item, 1);
if (ENV.TARINST == id) ENV.TARINST = item;
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Color</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Color */
image_blend = COLOR;
part_type_colour1(chip_part_item, COLOR);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Collision</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Movement */
if (place_meeting(x + xvel, y, obj_area_wall)) /* Horz collision */
{
    while (!place_meeting(x + sign(xvel), y, obj_area_wall))
        x += sign(xvel); /* Simulate collision */
    xvel = -xvel;  
    event_perform(ev_alarm, 1);  
}
if (place_meeting(x, y + yvel, obj_area_wall)) /* Vert collision */
{
    while (!place_meeting(x, y + sign(yvel), obj_area_wall))
        y += sign(yvel);
    yvel = -yvel;
    event_perform(ev_alarm, 1);      
}

image_angle = point_direction(x, y, x + xvel, y + yvel);
if (xvel != 0 || yvel != 0) 
{
    if (wet) /* Make bubbles */
    {
        if (!floor(random(3)))
        {
            var bubble = instance_create(x, y, obj_amb_bubble);
            bubble.xvel = floor(random(3)) - 1;
            bubble.yvel = floor(random(3)) - 1;
        }
    }
    else
    {
        part_particles_create(part_sys, x, y, chip_part_tail, 1);
    }
}

/* WATER */
if (place_meeting(x, y, obj_area_water) &amp;&amp; !wet) /* Into water */
{
    splash();
    wet = true;
}
else if (!place_meeting(x, y, obj_area_water) &amp;&amp; wet) /* Outof water */
{
    wet = false;
}

x += xvel; /* Translate */
y += yvel;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>4,4</point>
    <point>4,4</point>
  </PhysicsShapePoints>
</object>
