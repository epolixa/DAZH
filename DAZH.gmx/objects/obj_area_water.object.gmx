<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_area_water</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_area</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Attributes</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Attributes */
CURRENT[0] = 0; CURRENT[1] = 0; /* [xvel, yvel] Water current force/direction */
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Particle</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Water particles */
water_part_float = part_type_create();
part_type_sprite(water_part_float, spr_particle_water, false, false, true);
part_type_size(water_part_float, 1, 1, 0, 0);
part_type_speed(water_part_float, 0, 0, 0, 0);     /* Default */
part_type_direction(water_part_float, 0, 0, 0, 0); /* Default */
part_type_life(water_part_float, 10, 30);

alarm[0] = 1;  /* Set part speed/gravity */
alarm[1] = 10; /* Create a particle */
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Create particle</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Pick location */
var partx = (x - sprite_width/2 + 4) + (floor(random(sprite_width)) - 2); 
var party = (y - sprite_height/2 + 4) + (floor(random(sprite_height)) - 2);

/* Create a particle */
part_particles_create(global.part_sys, partx, party, water_part_float, 1);

/* Reset alarm */
alarm[1] = 10;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Particle properties</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Modify particle properties based on current */
if (CURRENT[0] != 0)
{
    part_type_speed(water_part_float, 0, abs(CURRENT[0]), 0, 0);
    if (CURRENT[0] &gt; 0)
    {
        part_type_gravity(water_part_float, abs(CURRENT[0]), 0);
        part_type_direction(water_part_float, 350, 10, 0, 0);   
    }
    else
    {
        part_type_gravity(water_part_float, abs(CURRENT[0]), 180);
        part_type_direction(water_part_float, 170, 190, 0, 0);   
    }        
}
else if (CURRENT[1] != 0)
{
    part_type_speed(water_part_float, 0, abs(CURRENT[1]), 0, 0);
    if (CURRENT[1] &gt; 0)
    {
        part_type_gravity(water_part_float, abs(CURRENT[1]), 270);
        part_type_direction(water_part_float, 260, 280, 0, 0);   
    }
    else
    {
        part_type_gravity(water_part_float, abs(CURRENT[1]), 90);
        part_type_direction(water_part_float, 80, 100, 0, 0);   
    }        
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Splash effect</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_area();

if (CURRENT[0] != 0 || CURRENT[1] != 0)
{
    var inst, i;

    if (place_meeting(x, y, obj_char_player))
    {
        inst = instance_nearest(x, y, obj_char_player);
        inst.xvel += CURRENT[0];
        inst.yvel += CURRENT[1];
    }
    if (place_meeting(x, y, obj_amb))
    {
        for (i = 0; i &lt; instance_number(obj_amb); i++)
        {
            inst = instance_find(obj_amb, i);
            if (place_meeting(x, y, inst))
            {
                inst.xvel += CURRENT[0];
                inst.yvel += CURRENT[1];  
            }
        }   
    }
    if (place_meeting(x, y, obj_item))
    {
        for (i = 0; i &lt; instance_number(obj_item); i++)
        {
            inst = instance_find(obj_item, i);
            if (place_meeting(x, y, inst))
            {
                inst.xvel += CURRENT[0];
                inst.yvel += CURRENT[1];  
            }
        }   
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
