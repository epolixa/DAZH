<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_test</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Initialize constants &amp; variables</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Constants */
WEIGHT = 1;   /* Effect of gravity */
XACCEL = 0.6; /* Horizontal acceleration */
JUMPSTR = 4;  /* Jump strength */
TERMXVEL = 4; /* Terminal horizontal velocity */
TERMYVEL = 8; /* Terminal verical velocity, should be the same for most objects */

/* Variables */
xprev = x;          /* Last valid horizontal position */
yprev = y;          /* Last valid vertical position */
xvel = 0;           /* Horizontal velocity */
yvel = 0;           /* Vertical velocity */
extra_jumps[0] = 1; /* [max jumps, jumps remaining] */ 
extra_jumps[1] = extra_jumps[0];
airborn = true;    /* Is the object off the ground? */
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Particles</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Particles */
player_part_sys = part_system_create();

/* Jump particles */
player_part_jump = part_type_create();
part_type_shape(player_part_jump, pt_shape_star);
part_type_size(player_part_jump, 0.1, 0.1, 0, 0);
part_type_speed(player_part_jump, 1, 1, 0, 0);
part_type_direction(player_part_jump, 200, 330, 0, 0);
part_type_life(player_part_jump, 10, 20);

/* Land particles */
player_part_land = part_type_create();
part_type_shape(player_part_land, pt_shape_star);
part_type_size(player_part_land, 0.1, 0.1, 0, 0);
part_type_speed(player_part_land, 0.8, 0.8, 0, 0);
part_type_direction(player_part_land, 0, 180, 0, 0);
part_type_life(player_part_land, 15, 25);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Env &amp; Instances</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* env */
ENV = instance_nearest(x, y, obj_env);

/* Instances */
if (airborn) BLOCK = noone;
else BLOCK = instance_nearest(x, y + 1, obj_block_solid_par);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Check user input</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Get user input */
in_up = keyboard_check(ord('W'));
in_down = keyboard_check(ord('S'));
in_left = keyboard_check(ord('A'));
in_right = keyboard_check(ord('D'));
in_jump = keyboard_check_pressed(32);
//in_positive = keyboard_check(32);
in_negative = keyboard_check(27);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Affect velocity</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Horz acceleration */
if (airborn)
{
    if (in_left &amp;&amp; (-1*xvel) &lt; TERMXVEL) xvel -= (0.4*XACCEL); /* Left */
    if (in_right &amp;&amp; xvel &lt; TERMXVEL)     xvel += (0.4*XACCEL); /* Right */
}
else
{
    if (in_left &amp;&amp; (-1*xvel) &lt; TERMXVEL) xvel -= XACCEL;
    if (in_right &amp;&amp; xvel &lt; TERMXVEL)     xvel += XACCEL;
}

/* Horz friction */
if (BLOCK = noone) /* Air friction */
{
    if (xvel*sign(xvel) &lt; 0.1*XACCEL) xvel = 0; 
    else xvel -= (sign(xvel)*(0.1*XACCEL));
}
else               /* Block friction */ 
{
    if (xvel*sign(xvel) &lt; BLOCK.FRICTION) xvel = 0;
    else xvel -= (sign(xvel)*(BLOCK.FRICTION)); 
}

/* Vert acceleration */
if (airborn &amp;&amp; yvel &lt; TERMYVEL) yvel += WEIGHT*ENV.GRAVITY; /* Gravity */
if (in_jump) /* Jumping */
{
    if (airborn &amp;&amp; extra_jumps[1] &gt; 0) 
    {
        yvel = -0.8*JUMPSTR;
        extra_jumps[1]--;
        part_particles_create(player_part_sys, x, y, player_part_jump, 1);
    }
    else if (!airborn)
        yvel = -1*JUMPSTR;         
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Movement</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Movement */
xprev = x; /* Store last valid positions */
yprev = y;

if (place_meeting(x + xvel, y, obj_block_solid_par)) /* Horz collision */
{
    while (!place_meeting(x + sign(xvel), y, obj_block_solid_par))
        x += sign(xvel); /* Simulate collision */
    xvel = 0;            /* Halt velocity */      
}
if (y &gt; room_height) room_restart(); /* Restart when fall out of room */
if (place_meeting(x, y + 1, obj_block_solid_par) &amp;&amp; airborn)        /* Land */
{
    airborn = false; 
    part_particles_create(player_part_sys, x, y + sprite_height/2, player_part_land, 2);
}
else if (!place_meeting(x, y + 1, obj_block_solid_par) &amp;&amp; !airborn) /* Liftoff */
{
    airborn = true;
}
if (place_meeting(x, y + yvel, obj_block_solid_par)) /* Vert collision */
{
    while (!place_meeting(x, y + sign(yvel), obj_block_solid_par))
        y += sign(yvel);
    if (sign(yvel) == 1)
        extra_jumps[1] = extra_jumps[0];
    yvel = 0;      
}

x += xvel; /* Translate */
y += yvel;

if (place_meeting(x, y, obj_block_solid_par)) /* Fix if stuck in a wall */
{
    x = xprev; xvel = 0;
    y = yprev; yvel = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
